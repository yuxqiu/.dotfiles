// Place your key bindings in this file to override the defaults
[
    // Use ctrl+j/k to select quick fix/suggestion
    {
        "key": "ctrl+j",
        "command": "selectNextQuickFix",
        "when": "editorFocus && quickFixWidgetVisible"
    },
    {
        "key": "ctrl+k",
        "command": "selectPrevQuickFix",
        "when": "editorFocus && quickFixWidgetVisible"
    },
    {
        "key": "ctrl+j",
        "command": "selectNextSuggestion",
        "when": "editorTextFocus && suggestWidgetMultipleSuggestions && suggestWidgetVisible"
    },
    {
        "key": "ctrl+k",
        "command": "selectPrevSuggestion",
        "when": "editorTextFocus && suggestWidgetMultipleSuggestions && suggestWidgetVisible"
    },

    // Move lines up/down
    {
        "key": "ctrl+shift+j",
        "command": "editor.action.moveLinesDownAction",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+shift+k",
        "command": "editor.action.moveLinesUpAction",
        "when": "editorTextFocus && !editorReadonly"
    },

    // File/Folder creation
    {
        "key": "n",
        "command": "workbench.files.action.createFileFromExplorer",
        "when": "explorerViewletVisible && filesExplorerFocus && !inputFocus",
    },
    {
        "key": "shift+n",
        "command": "workbench.files.action.createFolderFromExplorer",
        "when": "explorerViewletVisible && filesExplorerFocus && !inputFocus",
    },

    // Free Copy, Close (on insert), Select all (on insert)
    {
        "key": "ctrl+c",
        "command": "-vscode-neovim.escape",
        "when": "editorTextFocus && neovim.ctrlKeysNormal.c && neovim.init && !dirtyDiffVisible && !findWidgetVisible && !inReferenceSearchEditor && !markersNavigationVisible && !notebookCellFocused && !notificationCenterVisible && !parameterHintsVisible && !referenceSearchVisible && neovim.mode == 'normal' && editorLangId not in 'neovim.editorLangIdExclusions'"
    },
    {
        "key": "ctrl+c",
        "command": "-vscode-neovim.escape",
        "when": "editorTextFocus && neovim.ctrlKeysInsert.c && neovim.init && neovim.mode != 'normal' && editorLangId not in 'neovim.editorLangIdExclusions'"
    },
    {
        "key": "ctrl+w",
        "command": "-vscode-neovim.send",
        "when": "editorTextFocus && neovim.ctrlKeysInsert.w && neovim.init && neovim.mode == 'insert' && editorLangId not in 'neovim.editorLangIdExclusions'"
    },
    {
        "key": "ctrl+a",
        "command": "-vscode-neovim.send",
        "when": "editorTextFocus && neovim.ctrlKeysInsert.a && neovim.init && neovim.mode == 'insert' && editorLangId not in 'neovim.editorLangIdExclusions'"
    },

    // Copilot Arena
    {
        "key": "ctrl+shift+.",
        "command": "arena.promptToDiff",
        "when": "editorTextFocus"
    },

    // For Linux
    {
        "key": "shift+alt+f",
        "command": "editor.action.formatDocument",
        "when": "editorHasDocumentFormattingProvider && editorTextFocus && !editorReadonly && !inCompositeEditor"
    },
    {
        "key": "ctrl+shift+i",
        "command": "-editor.action.formatDocument",
        "when": "editorHasDocumentFormattingProvider && editorTextFocus && !editorReadonly && !inCompositeEditor"
    },

    // Snippets
    {
        "key": "ctrl+m ctrl+m",
        "command": "editor.action.insertSnippet",
        "args": {
            "name": "Insert Inline Math"
        },
        "when": "editorTextFocus && !editorReadonly && editorLangId == 'latex'"
    },
    {
        "key": "ctrl+shift+m",
        "command": "editor.action.insertSnippet",
        "args": {
            "name": "Insert Display Math"
        },
        "when": "editorTextFocus && !editorReadonly && editorLangId == 'latex'"
    },
    {
        "key": "ctrl+m ctrl+m",
        "command": "editor.action.insertSnippet",
        "args": {
            "name": "Insert Inline Math"
        },
        "when": "editorTextFocus && !editorReadonly && editorLangId == 'typst'"
    },
    {
        "key": "ctrl+shift+m",
        "command": "editor.action.insertSnippet",
        "args": {
            "name": "Insert Display Math"
        },
        "when": "editorTextFocus && !editorReadonly && editorLangId == 'typst'"
    },
    {
        "key": "ctrl+m ctrl+m",
        "command": "editor.action.insertSnippet",
        "args": {
            "name": "Insert Inline Math"
        },
        "when": "editorTextFocus && !editorReadonly && editorLangId == 'markdown'"
    },
    {
        "key": "ctrl+shift+m",
        "command": "editor.action.insertSnippet",
        "args": {
            "name": "Insert Display Math"
        },
        "when": "editorTextFocus && !editorReadonly && editorLangId == 'markdown'"
    }
]
